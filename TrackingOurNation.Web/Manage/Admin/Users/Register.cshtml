@{
    Page.Title = "Register";

    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("clubid", "You must specify an Club ID.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("AdminDB");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    var token = WebSecurity.CreateAccount(email, password, false);
                    // Navigate back to the homepage and exit
                    //WebSecurity.Login(email, password);
                    Response.Redirect("~/Manage/Admin/Users");

                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

@* Remove this section if you are using bundling *@

<div id="AdminTitle">
    <div class="PageName">
        <h2 class="entry-title">Register New Administrator</h2>
    </div>
</div>

<div id="AdminData">
                <div class="row">
                    <div class="span4 offset2">
                      <div class="well">
                        <form method="post">
                            @AntiForgery.GetHtml()
                            @* If at least one validation error exists, notify the user *@
                            @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

                            <fieldset>
                                <legend>Add New User</legend>
                                <ol>
                                    <li class="email">
                                        <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address</label>
                                        <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                                        @* Write any email validation errors to the page *@
                                        @Html.ValidationMessage("email")
                                    </li>
                                    <li class="password">
                                        <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password</label>
                                        <input type="password" id="password" name="password" @Validation.For("password") />
                                        @* Write any password validation errors to the page *@
                                        @Html.ValidationMessage("password")
                                    </li>
                                    <li class="confirm-password">
                                        <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm password</label>
                                        <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                                        @* Write any password validation errors to the page *@
                                        @Html.ValidationMessage("confirmPassword")
                                    </li>
                                </ol>
                                <input class="btn-primary btn" type="submit" value="Register" />
                                <a class="btn btn-danger" href="~/Manage/Admin/Users">Cancel</a>
                            </fieldset>
                        </form>
                      </div>
                    </div>
                </div>
</div>
